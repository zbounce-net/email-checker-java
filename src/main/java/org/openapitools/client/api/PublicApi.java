/*
 * ZBounce Email-Checker API
 * Batch and real-time email verification.
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateTaskRequest;
import org.openapitools.client.model.EmailReport;
import org.openapitools.client.model.FastVerifyRequest;
import org.openapitools.client.model.PaginatedResults;
import org.openapitools.client.model.TaskResponse;
import org.openapitools.client.model.TaskStatusResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PublicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PublicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1FastVerifyPost
     * @param fastVerifyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid key / exhausted quota </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FastVerifyPostCall(@javax.annotation.Nonnull FastVerifyRequest fastVerifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fastVerifyRequest;

        // create path and map variables
        String localVarPath = "/v1/fast-verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1FastVerifyPostValidateBeforeCall(@javax.annotation.Nonnull FastVerifyRequest fastVerifyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fastVerifyRequest' is set
        if (fastVerifyRequest == null) {
            throw new ApiException("Missing the required parameter 'fastVerifyRequest' when calling v1FastVerifyPost(Async)");
        }

        return v1FastVerifyPostCall(fastVerifyRequest, _callback);

    }

    /**
     * Fast single-email verification
     * 
     * @param fastVerifyRequest  (required)
     * @return EmailReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid key / exhausted quota </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public EmailReport v1FastVerifyPost(@javax.annotation.Nonnull FastVerifyRequest fastVerifyRequest) throws ApiException {
        ApiResponse<EmailReport> localVarResp = v1FastVerifyPostWithHttpInfo(fastVerifyRequest);
        return localVarResp.getData();
    }

    /**
     * Fast single-email verification
     * 
     * @param fastVerifyRequest  (required)
     * @return ApiResponse&lt;EmailReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid key / exhausted quota </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailReport> v1FastVerifyPostWithHttpInfo(@javax.annotation.Nonnull FastVerifyRequest fastVerifyRequest) throws ApiException {
        okhttp3.Call localVarCall = v1FastVerifyPostValidateBeforeCall(fastVerifyRequest, null);
        Type localVarReturnType = new TypeToken<EmailReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fast single-email verification (asynchronously)
     * 
     * @param fastVerifyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid key / exhausted quota </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Server busy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FastVerifyPostAsync(@javax.annotation.Nonnull FastVerifyRequest fastVerifyRequest, final ApiCallback<EmailReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1FastVerifyPostValidateBeforeCall(fastVerifyRequest, _callback);
        Type localVarReturnType = new TypeToken<EmailReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TasksPost
     * @param createTaskRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota exhausted / invalid key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TasksPostCall(@javax.annotation.Nonnull CreateTaskRequest createTaskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskRequest;

        // create path and map variables
        String localVarPath = "/v1/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TasksPostValidateBeforeCall(@javax.annotation.Nonnull CreateTaskRequest createTaskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTaskRequest' is set
        if (createTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'createTaskRequest' when calling v1TasksPost(Async)");
        }

        return v1TasksPostCall(createTaskRequest, _callback);

    }

    /**
     * Create batch verification task
     * 
     * @param createTaskRequest  (required)
     * @return TaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota exhausted / invalid key </td><td>  -  </td></tr>
     </table>
     */
    public TaskResponse v1TasksPost(@javax.annotation.Nonnull CreateTaskRequest createTaskRequest) throws ApiException {
        ApiResponse<TaskResponse> localVarResp = v1TasksPostWithHttpInfo(createTaskRequest);
        return localVarResp.getData();
    }

    /**
     * Create batch verification task
     * 
     * @param createTaskRequest  (required)
     * @return ApiResponse&lt;TaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota exhausted / invalid key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskResponse> v1TasksPostWithHttpInfo(@javax.annotation.Nonnull CreateTaskRequest createTaskRequest) throws ApiException {
        okhttp3.Call localVarCall = v1TasksPostValidateBeforeCall(createTaskRequest, null);
        Type localVarReturnType = new TypeToken<TaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create batch verification task (asynchronously)
     * 
     * @param createTaskRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota exhausted / invalid key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TasksPostAsync(@javax.annotation.Nonnull CreateTaskRequest createTaskRequest, final ApiCallback<TaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TasksPostValidateBeforeCall(createTaskRequest, _callback);
        Type localVarReturnType = new TypeToken<TaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TasksResultsTaskIdGet
     * @param taskId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TasksResultsTaskIdGetCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks-results/{task_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TasksResultsTaskIdGetValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling v1TasksResultsTaskIdGet(Async)");
        }

        return v1TasksResultsTaskIdGetCall(taskId, page, perPage, _callback);

    }

    /**
     * Paginated task results
     * 
     * @param taskId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 100)
     * @return PaginatedResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResults v1TasksResultsTaskIdGet(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        ApiResponse<PaginatedResults> localVarResp = v1TasksResultsTaskIdGetWithHttpInfo(taskId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Paginated task results
     * 
     * @param taskId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 100)
     * @return ApiResponse&lt;PaginatedResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResults> v1TasksResultsTaskIdGetWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = v1TasksResultsTaskIdGetValidateBeforeCall(taskId, page, perPage, null);
        Type localVarReturnType = new TypeToken<PaginatedResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Paginated task results (asynchronously)
     * 
     * @param taskId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TasksResultsTaskIdGetAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback<PaginatedResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TasksResultsTaskIdGetValidateBeforeCall(taskId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TasksTaskIdGet
     * @param taskId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TasksTaskIdGetCall(@javax.annotation.Nonnull String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/{task_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TasksTaskIdGetValidateBeforeCall(@javax.annotation.Nonnull String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling v1TasksTaskIdGet(Async)");
        }

        return v1TasksTaskIdGetCall(taskId, _callback);

    }

    /**
     * Get task status
     * 
     * @param taskId  (required)
     * @return TaskStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public TaskStatusResponse v1TasksTaskIdGet(@javax.annotation.Nonnull String taskId) throws ApiException {
        ApiResponse<TaskStatusResponse> localVarResp = v1TasksTaskIdGetWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Get task status
     * 
     * @param taskId  (required)
     * @return ApiResponse&lt;TaskStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskStatusResponse> v1TasksTaskIdGetWithHttpInfo(@javax.annotation.Nonnull String taskId) throws ApiException {
        okhttp3.Call localVarCall = v1TasksTaskIdGetValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<TaskStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task status (asynchronously)
     * 
     * @param taskId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TasksTaskIdGetAsync(@javax.annotation.Nonnull String taskId, final ApiCallback<TaskStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TasksTaskIdGetValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<TaskStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
