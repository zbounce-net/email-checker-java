/*
 * ZBounce Email Engine Platform
 * ZBounce Email Engine Platform API Reference
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EmailReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-27T09:35:58.468477+03:00[Europe/Minsk]", comments = "Generator version: 7.13.0")
public class EmailReport implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  @javax.annotation.Nullable
  private Boolean valid;

  public static final String SERIALIZED_NAME_DISPOSABLE = "disposable";
  @SerializedName(SERIALIZED_NAME_DISPOSABLE)
  @javax.annotation.Nullable
  private Boolean disposable;

  public static final String SERIALIZED_NAME_EXISTS = "exists";
  @SerializedName(SERIALIZED_NAME_EXISTS)
  @javax.annotation.Nullable
  private Boolean exists;

  public static final String SERIALIZED_NAME_PERMANENT_ERROR = "permanent_error";
  @SerializedName(SERIALIZED_NAME_PERMANENT_ERROR)
  @javax.annotation.Nullable
  private Boolean permanentError;

  public static final String SERIALIZED_NAME_ERROR_CATEGORY = "error_category";
  @SerializedName(SERIALIZED_NAME_ERROR_CATEGORY)
  @javax.annotation.Nullable
  private String errorCategory;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nullable
  private Integer ttl;

  public static final String SERIALIZED_NAME_ACCEPT_ALL = "accept_all";
  @SerializedName(SERIALIZED_NAME_ACCEPT_ALL)
  @javax.annotation.Nullable
  private Boolean acceptAll;

  public EmailReport() {
  }

  public EmailReport email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public EmailReport valid(@javax.annotation.Nullable Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Get valid
   * @return valid
   */
  @javax.annotation.Nullable
  public Boolean getValid() {
    return valid;
  }

  public void setValid(@javax.annotation.Nullable Boolean valid) {
    this.valid = valid;
  }


  public EmailReport disposable(@javax.annotation.Nullable Boolean disposable) {
    this.disposable = disposable;
    return this;
  }

  /**
   * Get disposable
   * @return disposable
   */
  @javax.annotation.Nullable
  public Boolean getDisposable() {
    return disposable;
  }

  public void setDisposable(@javax.annotation.Nullable Boolean disposable) {
    this.disposable = disposable;
  }


  public EmailReport exists(@javax.annotation.Nullable Boolean exists) {
    this.exists = exists;
    return this;
  }

  /**
   * Get exists
   * @return exists
   */
  @javax.annotation.Nullable
  public Boolean getExists() {
    return exists;
  }

  public void setExists(@javax.annotation.Nullable Boolean exists) {
    this.exists = exists;
  }


  public EmailReport permanentError(@javax.annotation.Nullable Boolean permanentError) {
    this.permanentError = permanentError;
    return this;
  }

  /**
   * Get permanentError
   * @return permanentError
   */
  @javax.annotation.Nullable
  public Boolean getPermanentError() {
    return permanentError;
  }

  public void setPermanentError(@javax.annotation.Nullable Boolean permanentError) {
    this.permanentError = permanentError;
  }


  public EmailReport errorCategory(@javax.annotation.Nullable String errorCategory) {
    this.errorCategory = errorCategory;
    return this;
  }

  /**
   * Get errorCategory
   * @return errorCategory
   */
  @javax.annotation.Nullable
  public String getErrorCategory() {
    return errorCategory;
  }

  public void setErrorCategory(@javax.annotation.Nullable String errorCategory) {
    this.errorCategory = errorCategory;
  }


  public EmailReport ttl(@javax.annotation.Nullable Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Retry-after (seconds) for temporary errors
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nullable Integer ttl) {
    this.ttl = ttl;
  }


  public EmailReport acceptAll(@javax.annotation.Nullable Boolean acceptAll) {
    this.acceptAll = acceptAll;
    return this;
  }

  /**
   * True when the domain is catch-all
   * @return acceptAll
   */
  @javax.annotation.Nullable
  public Boolean getAcceptAll() {
    return acceptAll;
  }

  public void setAcceptAll(@javax.annotation.Nullable Boolean acceptAll) {
    this.acceptAll = acceptAll;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailReport emailReport = (EmailReport) o;
    return Objects.equals(this.email, emailReport.email) &&
        Objects.equals(this.valid, emailReport.valid) &&
        Objects.equals(this.disposable, emailReport.disposable) &&
        Objects.equals(this.exists, emailReport.exists) &&
        Objects.equals(this.permanentError, emailReport.permanentError) &&
        Objects.equals(this.errorCategory, emailReport.errorCategory) &&
        Objects.equals(this.ttl, emailReport.ttl) &&
        Objects.equals(this.acceptAll, emailReport.acceptAll);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, valid, disposable, exists, permanentError, errorCategory, ttl, acceptAll);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailReport {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    disposable: ").append(toIndentedString(disposable)).append("\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("    permanentError: ").append(toIndentedString(permanentError)).append("\n");
    sb.append("    errorCategory: ").append(toIndentedString(errorCategory)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    acceptAll: ").append(toIndentedString(acceptAll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("valid");
    openapiFields.add("disposable");
    openapiFields.add("exists");
    openapiFields.add("permanent_error");
    openapiFields.add("error_category");
    openapiFields.add("ttl");
    openapiFields.add("accept_all");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmailReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailReport is not found in the empty JSON string", EmailReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("error_category") != null && !jsonObj.get("error_category").isJsonNull()) && !jsonObj.get("error_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_category").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailReport.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailReport>() {
           @Override
           public void write(JsonWriter out, EmailReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailReport
   * @throws IOException if the JSON string is invalid with respect to EmailReport
   */
  public static EmailReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailReport.class);
  }

  /**
   * Convert an instance of EmailReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

