/*
 * ZBounce Email-Checker API
 * Batch and real-time email verification.
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.BasicAuth;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-13T15:19:56.609676+03:00[Europe/Minsk]", comments = "Generator version: 7.13.0")
public class WebhookConfig implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private URI url;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  @javax.annotation.Nullable
  private String secret;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    COMPLETED("completed"),
    
    RESULTS("results");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  @javax.annotation.Nullable
  private ModeEnum mode = ModeEnum.COMPLETED;

  public static final String SERIALIZED_NAME_MAX_RETRIES = "max_retries";
  @SerializedName(SERIALIZED_NAME_MAX_RETRIES)
  @javax.annotation.Nullable
  private Integer maxRetries = 3;

  public static final String SERIALIZED_NAME_TIMEOUT_MS = "timeout_ms";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_MS)
  @javax.annotation.Nullable
  private Integer timeoutMs = 5000;

  public static final String SERIALIZED_NAME_DLQ_URL = "dlq_url";
  @SerializedName(SERIALIZED_NAME_DLQ_URL)
  @javax.annotation.Nullable
  private URI dlqUrl;

  public static final String SERIALIZED_NAME_BASIC_AUTH = "basic_auth";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH)
  @javax.annotation.Nullable
  private BasicAuth basicAuth;

  public WebhookConfig() {
  }

  public WebhookConfig url(@javax.annotation.Nonnull URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull URI url) {
    this.url = url;
  }


  public WebhookConfig secret(@javax.annotation.Nullable String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(@javax.annotation.Nullable String secret) {
    this.secret = secret;
  }


  public WebhookConfig mode(@javax.annotation.Nullable ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(@javax.annotation.Nullable ModeEnum mode) {
    this.mode = mode;
  }


  public WebhookConfig maxRetries(@javax.annotation.Nullable Integer maxRetries) {
    this.maxRetries = maxRetries;
    return this;
  }

  /**
   * Get maxRetries
   * minimum: 0
   * @return maxRetries
   */
  @javax.annotation.Nullable
  public Integer getMaxRetries() {
    return maxRetries;
  }

  public void setMaxRetries(@javax.annotation.Nullable Integer maxRetries) {
    this.maxRetries = maxRetries;
  }


  public WebhookConfig timeoutMs(@javax.annotation.Nullable Integer timeoutMs) {
    this.timeoutMs = timeoutMs;
    return this;
  }

  /**
   * Get timeoutMs
   * minimum: 1000
   * @return timeoutMs
   */
  @javax.annotation.Nullable
  public Integer getTimeoutMs() {
    return timeoutMs;
  }

  public void setTimeoutMs(@javax.annotation.Nullable Integer timeoutMs) {
    this.timeoutMs = timeoutMs;
  }


  public WebhookConfig dlqUrl(@javax.annotation.Nullable URI dlqUrl) {
    this.dlqUrl = dlqUrl;
    return this;
  }

  /**
   * Get dlqUrl
   * @return dlqUrl
   */
  @javax.annotation.Nullable
  public URI getDlqUrl() {
    return dlqUrl;
  }

  public void setDlqUrl(@javax.annotation.Nullable URI dlqUrl) {
    this.dlqUrl = dlqUrl;
  }


  public WebhookConfig basicAuth(@javax.annotation.Nullable BasicAuth basicAuth) {
    this.basicAuth = basicAuth;
    return this;
  }

  /**
   * Get basicAuth
   * @return basicAuth
   */
  @javax.annotation.Nullable
  public BasicAuth getBasicAuth() {
    return basicAuth;
  }

  public void setBasicAuth(@javax.annotation.Nullable BasicAuth basicAuth) {
    this.basicAuth = basicAuth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookConfig webhookConfig = (WebhookConfig) o;
    return Objects.equals(this.url, webhookConfig.url) &&
        Objects.equals(this.secret, webhookConfig.secret) &&
        Objects.equals(this.mode, webhookConfig.mode) &&
        Objects.equals(this.maxRetries, webhookConfig.maxRetries) &&
        Objects.equals(this.timeoutMs, webhookConfig.timeoutMs) &&
        Objects.equals(this.dlqUrl, webhookConfig.dlqUrl) &&
        Objects.equals(this.basicAuth, webhookConfig.basicAuth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, secret, mode, maxRetries, timeoutMs, dlqUrl, basicAuth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookConfig {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    timeoutMs: ").append(toIndentedString(timeoutMs)).append("\n");
    sb.append("    dlqUrl: ").append(toIndentedString(dlqUrl)).append("\n");
    sb.append("    basicAuth: ").append(toIndentedString(basicAuth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("secret");
    openapiFields.add("mode");
    openapiFields.add("max_retries");
    openapiFields.add("timeout_ms");
    openapiFields.add("dlq_url");
    openapiFields.add("basic_auth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookConfig is not found in the empty JSON string", WebhookConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if ((jsonObj.get("dlq_url") != null && !jsonObj.get("dlq_url").isJsonNull()) && !jsonObj.get("dlq_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dlq_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dlq_url").toString()));
      }
      // validate the optional field `basic_auth`
      if (jsonObj.get("basic_auth") != null && !jsonObj.get("basic_auth").isJsonNull()) {
        BasicAuth.validateJsonElement(jsonObj.get("basic_auth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookConfig>() {
           @Override
           public void write(JsonWriter out, WebhookConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookConfig
   * @throws IOException if the JSON string is invalid with respect to WebhookConfig
   */
  public static WebhookConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookConfig.class);
  }

  /**
   * Convert an instance of WebhookConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

