/*
 * ZBounce Email Engine Platform
 * ZBounce Email Engine Platform API Reference
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendEmailReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-27T09:35:58.468477+03:00[Europe/Minsk]", comments = "Generator version: 7.13.0")
public class SendEmailReq implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nonnull
  private String from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nonnull
  private List<String> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  @javax.annotation.Nullable
  private String text;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  @javax.annotation.Nullable
  private String html;

  public static final String SERIALIZED_NAME_VALIDATE = "validate";
  @SerializedName(SERIALIZED_NAME_VALIDATE)
  @javax.annotation.Nullable
  private Boolean validate = false;

  public static final String SERIALIZED_NAME_SKIP_DISPOSABLE = "skip_disposable";
  @SerializedName(SERIALIZED_NAME_SKIP_DISPOSABLE)
  @javax.annotation.Nullable
  private Boolean skipDisposable = false;

  public static final String SERIALIZED_NAME_SKIP_ACCEPT_ALL = "skip_accept_all";
  @SerializedName(SERIALIZED_NAME_SKIP_ACCEPT_ALL)
  @javax.annotation.Nullable
  private Boolean skipAcceptAll = false;

  public SendEmailReq() {
  }

  public SendEmailReq from(@javax.annotation.Nonnull String from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nonnull
  public String getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nonnull String from) {
    this.from = from;
  }


  public SendEmailReq to(@javax.annotation.Nonnull List<String> to) {
    this.to = to;
    return this;
  }

  public SendEmailReq addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nonnull
  public List<String> getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nonnull List<String> to) {
    this.to = to;
  }


  public SendEmailReq subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public SendEmailReq text(@javax.annotation.Nullable String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(@javax.annotation.Nullable String text) {
    this.text = text;
  }


  public SendEmailReq html(@javax.annotation.Nullable String html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(@javax.annotation.Nullable String html) {
    this.html = html;
  }


  public SendEmailReq validate(@javax.annotation.Nullable Boolean validate) {
    this.validate = validate;
    return this;
  }

  /**
   * Get validate
   * @return validate
   */
  @javax.annotation.Nullable
  public Boolean getValidate() {
    return validate;
  }

  public void setValidate(@javax.annotation.Nullable Boolean validate) {
    this.validate = validate;
  }


  public SendEmailReq skipDisposable(@javax.annotation.Nullable Boolean skipDisposable) {
    this.skipDisposable = skipDisposable;
    return this;
  }

  /**
   * Get skipDisposable
   * @return skipDisposable
   */
  @javax.annotation.Nullable
  public Boolean getSkipDisposable() {
    return skipDisposable;
  }

  public void setSkipDisposable(@javax.annotation.Nullable Boolean skipDisposable) {
    this.skipDisposable = skipDisposable;
  }


  public SendEmailReq skipAcceptAll(@javax.annotation.Nullable Boolean skipAcceptAll) {
    this.skipAcceptAll = skipAcceptAll;
    return this;
  }

  /**
   * Get skipAcceptAll
   * @return skipAcceptAll
   */
  @javax.annotation.Nullable
  public Boolean getSkipAcceptAll() {
    return skipAcceptAll;
  }

  public void setSkipAcceptAll(@javax.annotation.Nullable Boolean skipAcceptAll) {
    this.skipAcceptAll = skipAcceptAll;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendEmailReq sendEmailReq = (SendEmailReq) o;
    return Objects.equals(this.from, sendEmailReq.from) &&
        Objects.equals(this.to, sendEmailReq.to) &&
        Objects.equals(this.subject, sendEmailReq.subject) &&
        Objects.equals(this.text, sendEmailReq.text) &&
        Objects.equals(this.html, sendEmailReq.html) &&
        Objects.equals(this.validate, sendEmailReq.validate) &&
        Objects.equals(this.skipDisposable, sendEmailReq.skipDisposable) &&
        Objects.equals(this.skipAcceptAll, sendEmailReq.skipAcceptAll);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, subject, text, html, validate, skipDisposable, skipAcceptAll);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendEmailReq {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    validate: ").append(toIndentedString(validate)).append("\n");
    sb.append("    skipDisposable: ").append(toIndentedString(skipDisposable)).append("\n");
    sb.append("    skipAcceptAll: ").append(toIndentedString(skipAcceptAll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("subject");
    openapiFields.add("text");
    openapiFields.add("html");
    openapiFields.add("validate");
    openapiFields.add("skip_disposable");
    openapiFields.add("skip_accept_all");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendEmailReq
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendEmailReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendEmailReq is not found in the empty JSON string", SendEmailReq.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendEmailReq.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendEmailReq` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendEmailReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("to") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendEmailReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendEmailReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendEmailReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendEmailReq.class));

       return (TypeAdapter<T>) new TypeAdapter<SendEmailReq>() {
           @Override
           public void write(JsonWriter out, SendEmailReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendEmailReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendEmailReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendEmailReq
   * @throws IOException if the JSON string is invalid with respect to SendEmailReq
   */
  public static SendEmailReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendEmailReq.class);
  }

  /**
   * Convert an instance of SendEmailReq to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

