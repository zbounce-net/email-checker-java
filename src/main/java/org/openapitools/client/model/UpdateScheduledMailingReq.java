/*
 * ZBounce Email Engine Platform
 * ZBounce Email Engine Platform API Reference
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Template;
import org.openapitools.client.model.WebhookConfig;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request schema for updating an existing scheduled mailing. All fields are optional; only provided fields will be updated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-27T09:35:58.468477+03:00[Europe/Minsk]", comments = "Generator version: 7.13.0")
public class UpdateScheduledMailingReq implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_MAILING_ID = "mailing_id";
  @SerializedName(SERIALIZED_NAME_MAILING_ID)
  @javax.annotation.Nullable
  private String mailingId;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  @javax.annotation.Nullable
  private Template template;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  @javax.annotation.Nullable
  private List<String> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "scheduled_time";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  @javax.annotation.Nullable
  private String scheduledTime;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  @javax.annotation.Nullable
  private String timezone;

  public static final String SERIALIZED_NAME_RECURRING = "recurring";
  @SerializedName(SERIALIZED_NAME_RECURRING)
  @javax.annotation.Nullable
  private Boolean recurring;

  public static final String SERIALIZED_NAME_RECURRENCE_INTERVAL = "recurrence_interval";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_INTERVAL)
  @javax.annotation.Nullable
  private String recurrenceInterval;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  @javax.annotation.Nullable
  private Integer credits;

  public static final String SERIALIZED_NAME_HOOK = "hook";
  @SerializedName(SERIALIZED_NAME_HOOK)
  @javax.annotation.Nullable
  private WebhookConfig hook;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public UpdateScheduledMailingReq() {
  }

  public UpdateScheduledMailingReq mailingId(@javax.annotation.Nullable String mailingId) {
    this.mailingId = mailingId;
    return this;
  }

  /**
   * Unique identifier of the scheduled mailing.
   * @return mailingId
   */
  @javax.annotation.Nullable
  public String getMailingId() {
    return mailingId;
  }

  public void setMailingId(@javax.annotation.Nullable String mailingId) {
    this.mailingId = mailingId;
  }


  public UpdateScheduledMailingReq template(@javax.annotation.Nullable Template template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public Template getTemplate() {
    return template;
  }

  public void setTemplate(@javax.annotation.Nullable Template template) {
    this.template = template;
  }


  public UpdateScheduledMailingReq recipients(@javax.annotation.Nullable List<String> recipients) {
    this.recipients = recipients;
    return this;
  }

  public UpdateScheduledMailingReq addRecipientsItem(String recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Updated list of recipient email addresses.
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<String> getRecipients() {
    return recipients;
  }

  public void setRecipients(@javax.annotation.Nullable List<String> recipients) {
    this.recipients = recipients;
  }


  public UpdateScheduledMailingReq scheduledTime(@javax.annotation.Nullable String scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * Updated scheduled start time in ISO8601 format.
   * @return scheduledTime
   */
  @javax.annotation.Nullable
  public String getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(@javax.annotation.Nullable String scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public UpdateScheduledMailingReq timezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Updated client timezone.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
  }


  public UpdateScheduledMailingReq recurring(@javax.annotation.Nullable Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

  /**
   * Updated recurring flag.
   * @return recurring
   */
  @javax.annotation.Nullable
  public Boolean getRecurring() {
    return recurring;
  }

  public void setRecurring(@javax.annotation.Nullable Boolean recurring) {
    this.recurring = recurring;
  }


  public UpdateScheduledMailingReq recurrenceInterval(@javax.annotation.Nullable String recurrenceInterval) {
    this.recurrenceInterval = recurrenceInterval;
    return this;
  }

  /**
   * Updated recurrence interval (e.g., &#39;1 week&#39;).
   * @return recurrenceInterval
   */
  @javax.annotation.Nullable
  public String getRecurrenceInterval() {
    return recurrenceInterval;
  }

  public void setRecurrenceInterval(@javax.annotation.Nullable String recurrenceInterval) {
    this.recurrenceInterval = recurrenceInterval;
  }


  public UpdateScheduledMailingReq credits(@javax.annotation.Nullable Integer credits) {
    this.credits = credits;
    return this;
  }

  /**
   * Updated number of credits to reserve.
   * @return credits
   */
  @javax.annotation.Nullable
  public Integer getCredits() {
    return credits;
  }

  public void setCredits(@javax.annotation.Nullable Integer credits) {
    this.credits = credits;
  }


  public UpdateScheduledMailingReq hook(@javax.annotation.Nullable WebhookConfig hook) {
    this.hook = hook;
    return this;
  }

  /**
   * Get hook
   * @return hook
   */
  @javax.annotation.Nullable
  public WebhookConfig getHook() {
    return hook;
  }

  public void setHook(@javax.annotation.Nullable WebhookConfig hook) {
    this.hook = hook;
  }


  public UpdateScheduledMailingReq tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public UpdateScheduledMailingReq addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Updated tags associated with this scheduled mailing.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateScheduledMailingReq updateScheduledMailingReq = (UpdateScheduledMailingReq) o;
    return Objects.equals(this.mailingId, updateScheduledMailingReq.mailingId) &&
        Objects.equals(this.template, updateScheduledMailingReq.template) &&
        Objects.equals(this.recipients, updateScheduledMailingReq.recipients) &&
        Objects.equals(this.scheduledTime, updateScheduledMailingReq.scheduledTime) &&
        Objects.equals(this.timezone, updateScheduledMailingReq.timezone) &&
        Objects.equals(this.recurring, updateScheduledMailingReq.recurring) &&
        Objects.equals(this.recurrenceInterval, updateScheduledMailingReq.recurrenceInterval) &&
        Objects.equals(this.credits, updateScheduledMailingReq.credits) &&
        Objects.equals(this.hook, updateScheduledMailingReq.hook) &&
        Objects.equals(this.tags, updateScheduledMailingReq.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mailingId, template, recipients, scheduledTime, timezone, recurring, recurrenceInterval, credits, hook, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateScheduledMailingReq {\n");
    sb.append("    mailingId: ").append(toIndentedString(mailingId)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    recurrenceInterval: ").append(toIndentedString(recurrenceInterval)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    hook: ").append(toIndentedString(hook)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mailing_id");
    openapiFields.add("template");
    openapiFields.add("recipients");
    openapiFields.add("scheduled_time");
    openapiFields.add("timezone");
    openapiFields.add("recurring");
    openapiFields.add("recurrence_interval");
    openapiFields.add("credits");
    openapiFields.add("hook");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateScheduledMailingReq
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateScheduledMailingReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateScheduledMailingReq is not found in the empty JSON string", UpdateScheduledMailingReq.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateScheduledMailingReq.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateScheduledMailingReq` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mailing_id") != null && !jsonObj.get("mailing_id").isJsonNull()) && !jsonObj.get("mailing_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailing_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailing_id").toString()));
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        Template.validateJsonElement(jsonObj.get("template"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull() && !jsonObj.get("recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }
      if ((jsonObj.get("scheduled_time") != null && !jsonObj.get("scheduled_time").isJsonNull()) && !jsonObj.get("scheduled_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduled_time").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("recurrence_interval") != null && !jsonObj.get("recurrence_interval").isJsonNull()) && !jsonObj.get("recurrence_interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrence_interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurrence_interval").toString()));
      }
      // validate the optional field `hook`
      if (jsonObj.get("hook") != null && !jsonObj.get("hook").isJsonNull()) {
        WebhookConfig.validateJsonElement(jsonObj.get("hook"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateScheduledMailingReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateScheduledMailingReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateScheduledMailingReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateScheduledMailingReq.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateScheduledMailingReq>() {
           @Override
           public void write(JsonWriter out, UpdateScheduledMailingReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateScheduledMailingReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateScheduledMailingReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateScheduledMailingReq
   * @throws IOException if the JSON string is invalid with respect to UpdateScheduledMailingReq
   */
  public static UpdateScheduledMailingReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateScheduledMailingReq.class);
  }

  /**
   * Convert an instance of UpdateScheduledMailingReq to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

