/*
 * ZBounce Email Engine Platform
 * ZBounce Email Engine Platform API Reference
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.Template;
import org.openapitools.client.model.WebhookConfig;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A scheduled mailing object representing a mailing job scheduled for future execution. It includes details such as the email template, recipient list, scheduled time (in ISO8601 UTC), client timezone, recurring options, and the number of credits reserved automatically (calculated as the count of recipients). It also contains the current status, any associated webhook configuration, and timestamps.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-27T09:35:58.468477+03:00[Europe/Minsk]", comments = "Generator version: 7.13.0")
public class ScheduledMailing implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_API_KEY = "api_key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  @javax.annotation.Nullable
  private String apiKey;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  @javax.annotation.Nonnull
  private Template template;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  @javax.annotation.Nonnull
  private List<String> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "scheduled_time";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  @javax.annotation.Nonnull
  private Date scheduledTime;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  @javax.annotation.Nonnull
  private String timezone;

  public static final String SERIALIZED_NAME_RECURRING = "recurring";
  @SerializedName(SERIALIZED_NAME_RECURRING)
  @javax.annotation.Nonnull
  private Boolean recurring;

  public static final String SERIALIZED_NAME_RECURRENCE_INTERVAL = "recurrence_interval";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_INTERVAL)
  @javax.annotation.Nullable
  private String recurrenceInterval;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  @javax.annotation.Nonnull
  private Integer credits;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private String status;

  public static final String SERIALIZED_NAME_HOOK = "hook";
  @SerializedName(SERIALIZED_NAME_HOOK)
  @javax.annotation.Nullable
  private WebhookConfig hook;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private Integer createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private Integer updatedAt;

  public ScheduledMailing() {
  }

  public ScheduledMailing id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier (UUID) of the scheduled mailing.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public ScheduledMailing apiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Owner&#39;s API key. This field may be omitted in client responses if not required.
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
  }


  public ScheduledMailing template(@javax.annotation.Nonnull Template template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nonnull
  public Template getTemplate() {
    return template;
  }

  public void setTemplate(@javax.annotation.Nonnull Template template) {
    this.template = template;
  }


  public ScheduledMailing recipients(@javax.annotation.Nonnull List<String> recipients) {
    this.recipients = recipients;
    return this;
  }

  public ScheduledMailing addRecipientsItem(String recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * List of recipient email addresses.
   * @return recipients
   */
  @javax.annotation.Nonnull
  public List<String> getRecipients() {
    return recipients;
  }

  public void setRecipients(@javax.annotation.Nonnull List<String> recipients) {
    this.recipients = recipients;
  }


  public ScheduledMailing scheduledTime(@javax.annotation.Nonnull Date scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * Scheduled start time in ISO8601 format (UTC).
   * @return scheduledTime
   */
  @javax.annotation.Nonnull
  public Date getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(@javax.annotation.Nonnull Date scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public ScheduledMailing timezone(@javax.annotation.Nonnull String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The client&#39;s timezone, e.g., \&quot;America/New_York\&quot;, \&quot;America/Toronto\&quot;, or \&quot;Europe/Paris\&quot;.
   * @return timezone
   */
  @javax.annotation.Nonnull
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(@javax.annotation.Nonnull String timezone) {
    this.timezone = timezone;
  }


  public ScheduledMailing recurring(@javax.annotation.Nonnull Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

  /**
   * Indicates whether the mailing is recurring.
   * @return recurring
   */
  @javax.annotation.Nonnull
  public Boolean getRecurring() {
    return recurring;
  }

  public void setRecurring(@javax.annotation.Nonnull Boolean recurring) {
    this.recurring = recurring;
  }


  public ScheduledMailing recurrenceInterval(@javax.annotation.Nullable String recurrenceInterval) {
    this.recurrenceInterval = recurrenceInterval;
    return this;
  }

  /**
   * Recurrence interval (e.g., \&quot;1 week\&quot;); applicable if &#39;recurring&#39; is true.
   * @return recurrenceInterval
   */
  @javax.annotation.Nullable
  public String getRecurrenceInterval() {
    return recurrenceInterval;
  }

  public void setRecurrenceInterval(@javax.annotation.Nullable String recurrenceInterval) {
    this.recurrenceInterval = recurrenceInterval;
  }


  public ScheduledMailing credits(@javax.annotation.Nonnull Integer credits) {
    this.credits = credits;
    return this;
  }

  /**
   * Number of credits automatically reserved for the mailing (calculated as the number of recipients).
   * @return credits
   */
  @javax.annotation.Nonnull
  public Integer getCredits() {
    return credits;
  }

  public void setCredits(@javax.annotation.Nonnull Integer credits) {
    this.credits = credits;
  }


  public ScheduledMailing status(@javax.annotation.Nonnull String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the mailing: e.g., \&quot;pending\&quot;, \&quot;running\&quot;, \&quot;paused_due_to_insufficient_credits\&quot;, \&quot;completed\&quot;, or \&quot;cancelled\&quot;.
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull String status) {
    this.status = status;
  }


  public ScheduledMailing hook(@javax.annotation.Nullable WebhookConfig hook) {
    this.hook = hook;
    return this;
  }

  /**
   * Get hook
   * @return hook
   */
  @javax.annotation.Nullable
  public WebhookConfig getHook() {
    return hook;
  }

  public void setHook(@javax.annotation.Nullable WebhookConfig hook) {
    this.hook = hook;
  }


  public ScheduledMailing tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ScheduledMailing addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Optional tags associated with this scheduled mailing.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public ScheduledMailing createdAt(@javax.annotation.Nonnull Integer createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation timestamp (Unix timestamp).
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public Integer getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull Integer createdAt) {
    this.createdAt = createdAt;
  }


  public ScheduledMailing updatedAt(@javax.annotation.Nonnull Integer updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Last update timestamp (Unix timestamp).
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public Integer getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull Integer updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduledMailing scheduledMailing = (ScheduledMailing) o;
    return Objects.equals(this.id, scheduledMailing.id) &&
        Objects.equals(this.apiKey, scheduledMailing.apiKey) &&
        Objects.equals(this.template, scheduledMailing.template) &&
        Objects.equals(this.recipients, scheduledMailing.recipients) &&
        Objects.equals(this.scheduledTime, scheduledMailing.scheduledTime) &&
        Objects.equals(this.timezone, scheduledMailing.timezone) &&
        Objects.equals(this.recurring, scheduledMailing.recurring) &&
        Objects.equals(this.recurrenceInterval, scheduledMailing.recurrenceInterval) &&
        Objects.equals(this.credits, scheduledMailing.credits) &&
        Objects.equals(this.status, scheduledMailing.status) &&
        Objects.equals(this.hook, scheduledMailing.hook) &&
        Objects.equals(this.tags, scheduledMailing.tags) &&
        Objects.equals(this.createdAt, scheduledMailing.createdAt) &&
        Objects.equals(this.updatedAt, scheduledMailing.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, apiKey, template, recipients, scheduledTime, timezone, recurring, recurrenceInterval, credits, status, hook, tags, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduledMailing {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    recurrenceInterval: ").append(toIndentedString(recurrenceInterval)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hook: ").append(toIndentedString(hook)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("api_key");
    openapiFields.add("template");
    openapiFields.add("recipients");
    openapiFields.add("scheduled_time");
    openapiFields.add("timezone");
    openapiFields.add("recurring");
    openapiFields.add("recurrence_interval");
    openapiFields.add("credits");
    openapiFields.add("status");
    openapiFields.add("hook");
    openapiFields.add("tags");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("template");
    openapiRequiredFields.add("recipients");
    openapiRequiredFields.add("scheduled_time");
    openapiRequiredFields.add("timezone");
    openapiRequiredFields.add("recurring");
    openapiRequiredFields.add("credits");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduledMailing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduledMailing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduledMailing is not found in the empty JSON string", ScheduledMailing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduledMailing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduledMailing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduledMailing.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("api_key") != null && !jsonObj.get("api_key").isJsonNull()) && !jsonObj.get("api_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_key").toString()));
      }
      // validate the required field `template`
      Template.validateJsonElement(jsonObj.get("template"));
      // ensure the required json array is present
      if (jsonObj.get("recipients") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }
      if (!jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("recurrence_interval") != null && !jsonObj.get("recurrence_interval").isJsonNull()) && !jsonObj.get("recurrence_interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrence_interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurrence_interval").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `hook`
      if (jsonObj.get("hook") != null && !jsonObj.get("hook").isJsonNull()) {
        WebhookConfig.validateJsonElement(jsonObj.get("hook"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduledMailing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduledMailing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduledMailing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduledMailing.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduledMailing>() {
           @Override
           public void write(JsonWriter out, ScheduledMailing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduledMailing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduledMailing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduledMailing
   * @throws IOException if the JSON string is invalid with respect to ScheduledMailing
   */
  public static ScheduledMailing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduledMailing.class);
  }

  /**
   * Convert an instance of ScheduledMailing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

